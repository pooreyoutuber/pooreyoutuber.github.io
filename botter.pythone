# pentest_traffic_sender.py
import requests
import time
import threading
from urllib.parse import urlparse

# Configurable settings
REQUEST_COUNT = 900
DURATION_MINUTES = 5
results = {"success": 0, "fail": 0}
lock = threading.Lock()

def validate_url(url):
    try:
        result = urlparse(url)
        return all([result.scheme, result.netloc])
    except:
        return False

def send_request(url):
    global results
    try:
        response = requests.get(url, timeout=5)
        with lock:
            if response.status_code == 200:
                results["success"] += 1
            else:
                results["fail"] += 1
    except:
        with lock:
            results["fail"] += 1

def simulate(url):
    delay = (DURATION_MINUTES * 60) / REQUEST_COUNT
    threads = []

    start_time = time.time()
    for i in range(REQUEST_COUNT):
        thread = threading.Thread(target=lambda: send_request(url))
        threads.append(thread)
        thread.start()
        time.sleep(delay)

    for t in threads:
        t.join()

    elapsed = time.time() - start_time
    print(f"[+] Sent {REQUEST_COUNT} requests to {url}")
    print(f"[✓] Success: {results['success']} | [✗] Fail: {results['fail']} | Duration: {elapsed:.2f}s")

if __name__ == "__main__":
    target_url = input("Enter target URL (e.g., http://example.com): ").strip()
    
    if validate_url(target_url):
        simulate(target_url)
    else:
        print("[!] Invalid URL. Include protocol (http:// or https://).")
