import argparse
import requests
import threading
import time
import random
import sys

# ग्लोबल काउंटर ताकि पता चले कितने व्यू सफलतापूर्वक भेजे गए
success_counter = 0
lock = threading.Lock()

# --- मुख्य फ़ंक्शन: एक व्यू जनरेट करता है ---
def generate_view(url, view_id):
    """एक सिंगल HTTP GET रिक्वेस्ट भेजता है और रैंडम डिले और यूजर-एजेंट का उपयोग करता है।"""
    global success_counter
    
    # 1. रैंडम User-Agent लिस्ट
    # अलग-अलग ब्राउज़र को सिमुलेट करने के लिए
    user_agents = [
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.88 Safari/537.36',
        'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.3 Safari/605.1.15',
        'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.84 Safari/537.36',
        'Mozilla/5.0 (iPhone; CPU iPhone OS 15_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.4 Mobile/15E148 Safari/604.1',
    ]
    headers = {'User-Agent': random.choice(user_agents)}

    # 2. रैंडम डिले (1 से 5 सेकंड) - सर्वर पर अत्यधिक लोड से बचने के लिए महत्वपूर्ण
    delay = random.uniform(1, 5)
    time.sleep(delay)

    try:
        # रिक्वेस्ट भेजें (10 सेकंड का टाइमआउट सेट है)
        response = requests.get(url, headers=headers, timeout=10)
        
        if response.status_code == 200:
            # सक्सेसफुल व्यू काउंट को सुरक्षित रूप से बढ़ाएँ
            with lock:
                success_counter += 1
            print(f"View {view_id:04}: SUCCESS | Status: {response.status_code} | Delay: {delay:.2f}s | Total Success: {success_counter}", end='\r')
        else:
            print(f"View {view_id:04}: FAILED | Status: {response.status_code} | Delay: {delay:.2f}s")
            
    except requests.exceptions.RequestException as e:
        # अगर कोई कनेक्शन एरर हो
        print(f"View {view_id:04}: ERROR | Connection Failed: {e.__class__.__name__} | Delay: {delay:.2f}s")

# --- मुख्य फ़ंक्शन: सिमुलेशन शुरू करता है ---
def main():
    # 1. आर्गुमेंट्स (Inputs) को हैंडल करें
    parser = argparse.ArgumentParser(
        description="A Multi-threaded tool to simulate short-term views on a target URL.",
        epilog="Usage Example: python view_simulator.py https://mycollegeproject.com 1000"
    )
    parser.add_argument('url', type=str, help='The target URL of the website (e.g., https://example.com).')
    parser.add_argument('views', type=int, help='Total number of views to simulate (e.g., 1000).')
    
    args = parser.parse_args()
    
    target_url = args.url
    total_views = args.views
    
    if total_views <= 0:
        print("Error: The number of views must be a positive number.")
        sys.exit(1)
    
    print("\n---------------------------------------------------")
    print(f"Starting View Simulation")
    print(f"Target URL: {target_url}")
    print(f"Target Views: {total_views}")
    print("---------------------------------------------------\n")

    # 2. मल्टी-थ्रेडिंग सेटअप
    threads = []
    # एक साथ चलने वाले थ्रेड्स की अधिकतम संख्या (आप इसे बदल सकते हैं)
    MAX_CONCURRENT_THREADS = 50 
    
    view_count = 0
    start_time = time.time()
    
    # 3. थ्रेड्स शुरू करें
    for i in range(total_views):
        view_count += 1
        
        t = threading.Thread(target=generate_view, args=(target_url, view_count,))
        threads.append(t)
        t.start()
        
        # समवर्ती थ्रेड्स को नियंत्रित करने के लिए
        # अगर लाइव थ्रेड्स की संख्या MAX_CONCURRENT_THREADS से अधिक हो जाती है, तो इंतज़ार करें
        while threading.active_count() > MAX_CONCURRENT_THREADS:
            time.sleep(0.1) 

    # 4. सभी थ्रेड्स के खत्म होने का इंतज़ार करें
    for t in threads:
        t.join()
        
    end_time = time.time()
    duration = end_time - start_time
    
    # 5. अंतिम रिपोर्ट
    print(f"\n\n---------------------------------------------------")
    print("Simulation Complete!")
    print(f"Total Views Attempted: {view_count}")
    print(f"Total Views Successful: {success_counter}")
    print(f"Total Time Taken: {duration:.2f} seconds")
    print("---------------------------------------------------")

if __name__ == "__main__":
    main()
