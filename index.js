// index.js

const express = require('express');
const puppeteer = require('puppeteer-extra');
const StealthPlugin = require('puppeteer-extra-plugin-stealth');
const { v4: uuidv4 } = require('uuid');
const { OpenAI } = require('openai');
puppeteer.use(StealthPlugin()); // Anti-detection plugin

const app = express();
const port = 10000;

app.use(express.json());

// ======================= 1. ‡§ï‡•â‡§®‡•ç‡§´‡§º‡§ø‡§ó‡§∞‡•á‡§∂‡§® ‡§î‡§∞ ‡§™‡•ç‡§∞‡•â‡§ï‡•ç‡§∏‡•Ä ‡§°‡•á‡§ü‡§æ ========================

// Environment Variables ‡§∏‡•á ‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç
const PROXY_LIST_STRING = process.env.PROXY_LIST;
const PROXY_USER = process.env.PROXY_USER || ""; // ‡§™‡•ç‡§∞‡•â‡§ï‡•ç‡§∏‡•Ä ‡§Ø‡•Ç‡§ú‡§º‡§∞‡§®‡•á‡§Æ (‡§Ö‡§ó‡§∞ ‡§π‡•à)
const PROXY_PASS = process.env.PROXY_PASS || ""; // ‡§™‡•ç‡§∞‡•â‡§ï‡•ç‡§∏‡•Ä ‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§° (‡§Ö‡§ó‡§∞ ‡§π‡•à)
const GEMINI_API_KEY = process.env.GEMINI_API_KEY || process.env.OPENAI_API_KEY; 

// ‡§™‡•ç‡§∞‡•â‡§ï‡•ç‡§∏‡•Ä ‡§≤‡§ø‡§∏‡•ç‡§ü ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç
let PROXIES = [];
if (PROXY_LIST_STRING) {
    // ‡§ï‡•á‡§µ‡§≤ http/https ‡§™‡•ç‡§∞‡•â‡§ï‡•ç‡§∏‡•Ä ‡§ï‡•ã ‡§∏‡•ç‡§µ‡•Ä‡§ï‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç
    PROXIES = PROXY_LIST_STRING.split(',').filter(p => p.startsWith('http://') || p.startsWith('https://'));
}

if (PROXIES.length === 0) {
    console.error("PROXY_LIST is empty or invalid. Traffic tools will fail!");
}

let proxyIndex = 0;

// ‡§ü‡§æ‡§∞‡§ó‡•á‡§ü ‡§ï‡•â‡§®‡•ç‡§´‡§º‡§ø‡§ó‡§∞‡•á‡§∂‡§® (‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§ï‡•ã API ‡§ï‡•á ‡§Æ‡§æ‡§ß‡•ç‡§Ø‡§Æ ‡§∏‡•á ‡§≠‡•á‡§ú‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è)
// ‡§Ø‡§π‡§æ‡§Å ‡§â‡§¶‡§æ‡§π‡§∞‡§£ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§è‡§ï ‡§°‡§ø‡§´‡§º‡•â‡§≤‡•ç‡§ü ‡§µ‡•à‡§≤‡•ç‡§Ø‡•Ç ‡§∏‡•á‡§ü ‡§ï‡•Ä ‡§ó‡§à ‡§π‡•à
const DEFAULT_TARGET_URL = 'https://www.google.com/'; // API ‡§Æ‡•á‡§Ç ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§∏‡•á ‡§≤‡•á‡§®‡§æ ‡§¨‡•á‡§π‡§§‡§∞ ‡§π‡•à
const DEFAULT_SEARCH_QUERY = 'Best website booster tool';

const wait = (ms) => new Promise(resolve => setTimeout(resolve, ms));

// ======================= 2. ‡§è‡§°‡§µ‡§æ‡§Ç‡§∏ ‡§ü‡•ç‡§∞‡•à‡§´‡§º‡§ø‡§ï ‡§≤‡•â‡§ú‡§ø‡§ï (Search, Click, Scroll) ========================

async function sendAdvancedTraffic(jobId, viewNumber, proxyUrl, targetUrl, searchQuery) {
    let browser;
    let authUrl = proxyUrl; 

    // ‡§Ö‡§ó‡§∞ PROXY_USER/PASS ‡§π‡•à, ‡§§‡•ã ‡§™‡•ç‡§∞‡•â‡§ï‡•ç‡§∏‡•Ä URL ‡§ï‡•ã ‡§¨‡§¶‡§≤‡•á‡§Ç
    if (PROXY_USER && PROXY_PASS) {
        // http://user:pass@ip:port ‡§´‡•â‡§∞‡•ç‡§Æ‡•á‡§ü ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç
        const urlObj = new URL(proxyUrl);
        authUrl = `${urlObj.protocol}//${PROXY_USER}:${PROXY_PASS}@${urlObj.host}`;
    }

    try {
        console.log(`[üöÄ ${jobId} View ${viewNumber}] Starting with Proxy: ${proxyUrl.split('@').pop()}`);

        // Puppeteer ‡§ï‡•ã ‡§™‡•ç‡§∞‡•â‡§ï‡•ç‡§∏‡•Ä ‡§ï‡•á ‡§∏‡§æ‡§• ‡§≤‡•â‡§®‡•ç‡§ö ‡§ï‡§∞‡•á‡§Ç
        browser = await puppeteer.launch({
            headless: true,
            args: [
                `--proxy-server=${authUrl.replace('http://', '').replace('https://', '')}`, // Puppeteer ‡§ï‡•ã ‡§∏‡§ø‡§∞‡•ç‡§´‡§º ip:port ‡§ö‡§æ‡§π‡§ø‡§è (‡§Ø‡§æ auth ‡§ï‡•á ‡§∏‡§æ‡§•)
                '--no-sandbox',
                '--disable-setuid-sandbox'
            ]
        });
        const page = await browser.newPage();
        
        // 1. Authentication (‡§Ö‡§ó‡§∞ ‡§ú‡§º‡§∞‡•Ç‡§∞‡§§ ‡§π‡•ã)
        if (PROXY_USER && PROXY_PASS) {
            await page.authenticate({ username: PROXY_USER, password: PROXY_PASS });
        }

        // 2. Search (‡§ñ‡•ã‡§ú‡•á‡§Ç) - Google ‡§™‡§∞ ‡§ú‡§æ‡§è‡§Å
        console.log(`[${jobId} View ${viewNumber}] Searching Google for: ${searchQuery}`);
        await page.goto('https://www.google.com', { waitUntil: 'domcontentloaded', timeout: 30000 });
        await page.type('textarea[name="q"]', searchQuery, { delay: 100 }); // ‡§ß‡•Ä‡§∞‡•á-‡§ß‡•Ä‡§∞‡•á ‡§ü‡§æ‡§á‡§™ ‡§ï‡§∞‡•á‡§Ç
        await page.keyboard.press('Enter');
        
        // 3. Click (‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞‡•á‡§Ç) - ‡§Ö‡§™‡§®‡•Ä ‡§µ‡•á‡§¨‡§∏‡§æ‡§á‡§ü ‡§¢‡•Ç‡§Ç‡§¢‡•á‡§Ç
        await page.waitForTimeout(5000); 
        
        // ‡§Ö‡§™‡§®‡•Ä ‡§µ‡•á‡§¨‡§∏‡§æ‡§á‡§ü ‡§ï‡•á ‡§°‡•ã‡§Æ‡•á‡§® ‡§ï‡•ã ‡§∏‡§π‡•Ä ‡§¢‡§Ç‡§ó ‡§∏‡•á ‡§®‡§ø‡§ï‡§æ‡§≤‡§®‡•á ‡§ï‡•Ä ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡•á‡§Ç
        const targetDomain = new URL(targetUrl).hostname;
        
        // targetDomain ‡§µ‡§æ‡§≤‡•á ‡§≤‡§ø‡§Ç‡§ï ‡§ï‡•ã ‡§¢‡•Ç‡§Ç‡§¢‡•á‡§Ç ‡§î‡§∞ ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞‡•á‡§Ç
        const targetLinkSelector = `a[href*="${targetDomain}"]`;
        const targetLink = await page.$(targetLinkSelector);
        
        if (targetLink) {
            console.log(`[üü¢ ${jobId} View ${viewNumber}] Target URL found. Clicking...`);
            await targetLink.click();
            await page.waitForNavigation({ waitUntil: 'networkidle0', timeout: 30000 }); // ‡§Ö‡§™‡§®‡•Ä ‡§µ‡•á‡§¨‡§∏‡§æ‡§á‡§ü ‡§™‡§∞ ‡§®‡•á‡§µ‡§ø‡§ó‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§®‡•á‡§ü‡§µ‡§∞‡•ç‡§ï ‡§∂‡§æ‡§Ç‡§§ ‡§π‡•ã‡§®‡•á ‡§ï‡§æ ‡§á‡§Ç‡§§‡§ú‡§º‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç
        } else {
            console.log(`[üî¥ ${jobId} View ${viewNumber}] Target URL not found on search page. Aborting view.`);
            await browser.close();
            return;
        }

        // 4. On-Page Interaction (‡§∏‡•ç‡§ï‡•ç‡§∞‡•â‡§≤ ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§∞‡•Å‡§ï‡•á‡§Ç)
        console.log(`[${jobId} View ${viewNumber}] Landed. Starting deep interaction...`);
        
        const totalDuration = Math.floor(Math.random() * (30000 - 15000 + 1)) + 15000; // 15-30 seconds
        const scrollCount = 4;
        const scrollDelay = totalDuration / scrollCount;

        for (let i = 1; i <= scrollCount; i++) {
            const scrollAmount = Math.floor(Math.random() * 500) + 100;
            await page.evaluate(y => { window.scrollBy(0, y); }, scrollAmount); 
            await page.waitForTimeout(scrollDelay * (Math.random() * 0.5 + 0.75)); 
        }

        // 5. Success
        await browser.close();
        console.log(`[‚úÖ ${jobId} View ${viewNumber}] Full User Journey Complete.`);

    } catch (error) {
        console.error(`[‚ùå ${jobId} View ${viewNumber}] Job failed for proxy ${proxyUrl.split('@').pop()}:`, error.message);
        if (browser) await browser.close();
    }
}

// ----------------------------------------------------
// API ENDPOINTS (Concurrent Dispatch)
// ----------------------------------------------------

// Traffic Boost API: /api/boost-traffic
app.post('/api/boost-traffic', async (req, res) => {
    const { targetUrl, searchQuery, views } = req.body;
    
    // ‡§á‡§®‡§™‡•Å‡§ü ‡§µ‡•à‡§≤‡§ø‡§°‡•á‡§∂‡§®
    if (!targetUrl || !searchQuery || !views || views > 30 || PROXIES.length === 0) {
        return res.status(400).json({ 
            success: false, 
            message: "Missing fields, views > 30, or PROXY_LIST is empty. Max 30 views allowed due to Render Free Plan limits." 
        });
    }

    const jobId = uuidv4().substring(0, 8);
    
    res.status(202).json({
        success: true, 
        message: `Job ${jobId} accepted. ${views} views will be dispatched immediately. Check logs for progress (Green Tick).`, 
        simulation_mode: "Advanced Headless Browser (GSC/GA4 Focus)" 
    });

    const viewPromises = [];
    for (let i = 1; i <= views; i++) {
        const currentProxy = PROXIES[proxyIndex];
        
        // ‡§™‡•ç‡§∞‡•â‡§ï‡•ç‡§∏‡•Ä ‡§á‡§Ç‡§°‡•á‡§ï‡•ç‡§∏ ‡§ï‡•ã ‡§∞‡•ã‡§ü‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
        proxyIndex = (proxyIndex + 1) % PROXIES.length;

        // ‡§∏‡§≠‡•Ä ‡§µ‡•ç‡§Ø‡•Ç‡§ú‡§º ‡§ï‡•ã ‡§è‡§ï ‡§∏‡§æ‡§• (Concurrent) ‡§ö‡§≤‡§æ‡§è‡§Å
        viewPromises.push(sendAdvancedTraffic(jobId, i, currentProxy, targetUrl, searchQuery));

        // 2-5 ‡§∏‡•á‡§ï‡§Ç‡§° ‡§ï‡§æ ‡§õ‡•ã‡§ü‡§æ ‡§¨‡•ç‡§∞‡•á‡§ï ‡§§‡§æ‡§ï‡§ø ‡§∏‡§∞‡•ç‡§µ‡§∞ ‡§ì‡§µ‡§∞‡§≤‡•ã‡§° ‡§® ‡§π‡•ã
        await wait(Math.random() * 3000 + 2000); 
    }
    
    // ‡§∏‡§≠‡•Ä ‡§µ‡•ç‡§Ø‡•Ç‡§ú‡§º ‡§ï‡•á ‡§ñ‡§§‡•ç‡§Æ ‡§π‡•ã‡§®‡•á ‡§ï‡§æ ‡§á‡§Ç‡§§‡§ú‡§º‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç
    await Promise.all(viewPromises);
    console.log(`--- Job ${jobId} Finished! ---`);
});


// Instagram Caption Generator API: /api/generate-caption (AI part for completeness)
app.post('/api/generate-caption', async (req, res) => {
    const { reelTopic, captionStyle, numberOfCaptions } = req.body;
    if (!GEMINI_API_KEY) { return res.status(500).json({ success: false, message: "AI Key is not configured." }); }
    // ... (AI generation logic) ...
    try {
        const openai = new OpenAI({ apiKey: GEMINI_API_KEY }); 
        const prompt = `Generate ${numberOfCaptions} catchy, viral captions in ${captionStyle} style for a reel about "${reelTopic}". Respond with a simple, numbered list of captions.`;
        const completion = await openai.chat.completions.create({ model: "gpt-3.5-turbo", messages: [{ role: "user", content: prompt }] });
        const captions = completion.choices[0].message.content.trim().split('\n').map(line => line.replace(/^\s*\d+\.\s*/, '').trim()).filter(line => line.length > 0);
        return res.status(200).json({ success: true, captions: captions });
    } catch (error) {
        return res.status(500).json({ success: false, message: "Caption generation failed. Check API key." });
    }
});


// Article Generator API: /api/generate-article (AI part for completeness)
app.post('/api/generate-article', async (req, res) => {
    const { topic, length, style } = req.body;
    if (!GEMINI_API_KEY) { return res.status(500).json({ success: false, message: "AI Key is not configured." }); }
    // ... (AI generation logic) ...
    try {
        const openai = new OpenAI({ apiKey: GEMINI_API_KEY }); 
        const prompt = `Write a comprehensive article on "${topic}". The article should be ${length} words long and written in a ${style} tone. Include an introduction, 3-4 main sections with subheadings, and a conclusion.`;
        const completion = await openai.chat.completions.create({ model: "gpt-4", messages: [{ role: "user", content: prompt }] });
        const article = completion.choices[0].message.content.trim();
        return res.status(200).json({ success: true, article: article });
    } catch (error) {
        return res.status(500).json({ success: false, message: "Article generation failed. Check API key." });
    }
});


// Health check endpoint (Render Sleep Fix)
app.get('/', (req, res) => {
    res.send('Service is active.');
});

// Start Server
app.listen(port, () => {
    console.log(`Server running on port ${port}`);
});
