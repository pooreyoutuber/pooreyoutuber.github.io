// index.js

const express = require('express');
const puppeteer = require('puppeteer-extra');
const StealthPlugin = require('puppeteer-extra-plugin-stealth');
const { v4: uuidv4 } = require('uuid');
const { OpenAI } = require('openai');
const url = require('url'); 
puppeteer.use(StealthPlugin());

const app = express();
const port = 10000;

app.use(express.json());

// ======================= 1. ‡§ï‡•â‡§®‡•ç‡§´‡§º‡§ø‡§ó‡§∞‡•á‡§∂‡§® ‡§î‡§∞ ‡§™‡•ç‡§∞‡•â‡§ï‡•ç‡§∏‡•Ä ‡§°‡•á‡§ü‡§æ (Environment Variables ‡§∏‡•á ‡§≤‡•ã‡§°) ========================

// üö® ‡§Ø‡•á ‡§§‡•Ä‡§®‡•ã‡§Ç Values Render Secrets ‡§∏‡•á ‡§≤‡•ã‡§° ‡§π‡•ã‡§Ç‡§ó‡•Ä‡•§
// ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§ï‡§ø Render Secrets ‡§Æ‡•á‡§Ç PROXY_USER ‡§î‡§∞ PROXY_PASS ‡§∏‡§π‡•Ä ‡§π‡•ã‡§Ç‡•§
const PROXY_LIST_STRING = process.env.PROXY_LIST; 
const PROXY_USER = process.env.PROXY_USER || ""; 
const PROXY_PASS = process.env.PROXY_PASS || ""; 

const GEMINI_API_KEY = process.env.GEMINI_API_KEY || process.env.OPENAI_API_KEY; 

// ‡§™‡•ç‡§∞‡•â‡§ï‡•ç‡§∏‡•Ä ‡§≤‡§ø‡§∏‡•ç‡§ü ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç
let PROXIES = [];
if (PROXY_LIST_STRING) {
    PROXIES = PROXY_LIST_STRING.split(',').filter(p => p.startsWith('http://') || p.startsWith('https://'));
}

if (PROXIES.length === 0) {
    console.error("PROXY_LIST is empty or invalid. Traffic tools will fail!");
}

let proxyIndex = 0;

const wait = (ms) => new Promise(resolve => setTimeout(resolve, ms));

// ======================= 2. ‡§è‡§°‡§µ‡§æ‡§Ç‡§∏ ‡§ü‡•ç‡§∞‡•à‡§´‡§º‡§ø‡§ï ‡§≤‡•â‡§ú‡§ø‡§ï (Direct Navigation for GA4) ========================

async function sendAdvancedTraffic(jobId, viewNumber, proxyUrl, targetUrl) {
    let browser;
    let finalProxyUrl = proxyUrl; 

    // üö® ‡§ë‡§•‡•á‡§Ç‡§ü‡§ø‡§ï‡•á‡§∂‡§® ‡§´‡§ø‡§ï‡•ç‡§∏: user:pass ‡§ï‡•ã ‡§∏‡•Ä‡§ß‡•á ‡§™‡•ç‡§∞‡•â‡§ï‡•ç‡§∏‡•Ä URL ‡§Æ‡•á‡§Ç ‡§°‡§æ‡§≤‡•á‡§Ç
    if (PROXY_USER && PROXY_PASS) {
        try {
            const urlObj = new URL(proxyUrl);
            // Puppeteer ‡§ï‡•ã ‡§¶‡•á‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡§π‡•Ä ‡§´‡§º‡•â‡§∞‡•ç‡§Æ‡•á‡§ü: user:pass@ip:port
            finalProxyUrl = `${urlObj.protocol}//${PROXY_USER}:${PROXY_PASS}@${urlObj.host}`;
        } catch (e) {
            console.error("Invalid Proxy URL in list.");
            return;
        }
    }

    try {
        const displayProxy = proxyUrl.split('@').pop();
        console.log(`[üöÄ ${jobId} View ${viewNumber}] Starting with Proxy: ${displayProxy}`);

        // --- 1. ‡§¨‡•ç‡§∞‡§æ‡§â‡§ú‡§º‡§∞ ‡§≤‡•â‡§®‡•ç‡§ö ---
        try {
            browser = await puppeteer.launch({
                headless: true,
                args: [
                    `--proxy-server=${finalProxyUrl}`, 
                    '--no-sandbox',
                    '--disable-setuid-sandbox',
                    '--disable-gpu', 
                    '--window-size=1280,720' 
                ],
                timeout: 45000 // ‡§¨‡•ç‡§∞‡§æ‡§â‡§ú‡§º‡§∞ ‡§≤‡•â‡§®‡•ç‡§ö ‡§ü‡§æ‡§á‡§Æ‡§Ü‡§â‡§ü
            });
        } catch (e) {
            console.error(`[‚ùå ${jobId} View ${viewNumber}] BROWSER LAUNCH FAILED (Proxy might be down/slow). Error: ${e.message}`);
            return; 
        }

        const page = await browser.newPage();
        
        // 2. Direct Navigation (‡§∏‡•Ä‡§ß‡•á ‡§ú‡§æ‡§è‡§Å) - Search Console ‡§ï‡•ã ‡§¨‡§æ‡§Ø‡§™‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç
        console.log(`[üü¢ ${jobId} View ${viewNumber}] Direct Navigation to: ${targetUrl} (GA4 Target)`);
        // ‡§ü‡§æ‡§á‡§Æ‡§Ü‡§â‡§ü ‡§¨‡§¢‡§º‡§æ‡§ï‡§∞ 45 ‡§∏‡•á‡§ï‡§Ç‡§° ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ
        await page.goto(targetUrl, { waitUntil: 'domcontentloaded', timeout: 45000 });
        
        // 3. On-Page Interaction (‡§∏‡•ç‡§ï‡•ç‡§∞‡•â‡§≤ ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§∞‡•Å‡§ï‡•á‡§Ç)
        console.log(`[${jobId} View ${viewNumber}] Landed. Starting deep interaction...`);
        
        const totalDuration = Math.floor(Math.random() * (30000 - 15000 + 1)) + 15000; // 15 ‡§∏‡•á 30 ‡§∏‡•á‡§ï‡§Ç‡§°
        const scrollCount = 4;
        const scrollDelay = totalDuration / scrollCount;

        for (let i = 1; i <= scrollCount; i++) {
            const scrollAmount = Math.floor(Math.random() * 500) + 100;
            await page.evaluate(y => { window.scrollBy(0, y); }, scrollAmount); 
            await page.waitForTimeout(scrollDelay * (Math.random() * 0.5 + 0.75)); 
        }

        // 4. Success
        console.log(`[‚úÖ ${jobId} View ${viewNumber}] Full User Journey Complete.`);

    } catch (error) {
        console.error(`[‚ùå ${jobId} View ${viewNumber}] Job failed (Network/Timeout). Error: ${error.message}`);

    } finally {
        if (browser) {
            await browser.close();
        }
    }
}

// ----------------------------------------------------
// API ENDPOINTS (Timed Dispatch Logic)
// ----------------------------------------------------

// Traffic Boost API: /api/boost-traffic
app.post('/api/boost-traffic', async (req, res) => {
    // searchQuery ‡§ï‡•Ä ‡§Ö‡§¨ ‡§ú‡§º‡§∞‡•Ç‡§∞‡§§ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à, ‡§≤‡•á‡§ï‡§ø‡§® ‡§á‡§∏‡•á ‡§π‡§ü‡§æ‡§®‡§æ ‡§Æ‡•Å‡§∂‡•ç‡§ï‡§ø‡§≤ ‡§π‡•ã ‡§∏‡§ï‡§§‡§æ ‡§π‡•à‡•§
    const { targetUrl, searchQuery, views } = req.body; 
    
    // ‡§á‡§®‡§™‡•Å‡§ü ‡§µ‡•à‡§≤‡§ø‡§°‡•á‡§∂‡§®
    if (!targetUrl || !views || views > 500 || PROXIES.length === 0) {
        return res.status(400).json({ 
            success: false, 
            message: "Missing fields, views > 500, or PROXY_LIST is empty." 
        });
    }
    if (!PROXY_USER || !PROXY_PASS) {
        return res.status(500).json({ 
            success: false, 
            message: "Proxy User/Pass are missing in Environment Variables. Fix secrets." 
        });
    }


    const jobId = uuidv4().substring(0, 8);
    const TOTAL_DISPATCH_TIME_HOURS = 24; 
    const TOTAL_DISPATCH_TIME_MS = TOTAL_DISPATCH_TIME_HOURS * 60 * 60 * 1000;
    
    // ‡§™‡•ç‡§∞‡§§‡§ø ‡§µ‡•ç‡§Ø‡•Ç ‡§î‡§∏‡§§ ‡§°‡§ø‡§≤‡•á (‡§Æ‡§ø‡§≤‡•Ä‡§∏‡•á‡§ï‡§Ç‡§° ‡§Æ‡•á‡§Ç)
    const BASE_DELAY_MS = TOTAL_DISPATCH_TIME_MS / views; 
    
    // ‡§∏‡§∞‡•ç‡§µ‡§∞ ‡§ï‡•ã ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§ú‡§µ‡§æ‡§¨ ‡§¶‡•á‡§Ç
    res.status(202).json({
        success: true, 
        message: `Job ${jobId} accepted. ${views} views will be dispatched over the next ${TOTAL_DISPATCH_TIME_HOURS} hours. Check logs for progress.`, 
        simulation_mode: "Timed Headless Browser Dispatch (Direct GA4 Views)" 
    });

    // üö® ‡§ü‡§æ‡§á‡§Æ‡§ø‡§Ç‡§ó ‡§≤‡•â‡§ú‡§ø‡§ï: ‡§µ‡•ç‡§Ø‡•Ç‡§ú‡§º ‡§ï‡•ã ‡§∏‡•Ä‡§∞‡§ø‡§Ø‡§≤‡•Ä ‡§≠‡•á‡§ú‡•á‡§Ç
    for (let i = 1; i <= views; i++) {
        const currentProxy = PROXIES[proxyIndex];
        
        // ‡§™‡•ç‡§∞‡•â‡§ï‡•ç‡§∏‡•Ä ‡§á‡§Ç‡§°‡•á‡§ï‡•ç‡§∏ ‡§ï‡•ã ‡§∞‡•ã‡§ü‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
        proxyIndex = (proxyIndex + 1) % PROXIES.length;

        // ‡§µ‡•ç‡§Ø‡•Ç ‡§ï‡•ã ‡§ö‡§≤‡§æ‡§è‡§Å
        // ‡§Ö‡§¨ searchQuery ‡§™‡•à‡§∞‡§æ‡§Æ‡•Ä‡§ü‡§∞ ‡§®‡§π‡•Ä‡§Ç ‡§≠‡•á‡§ú‡§æ ‡§ú‡§æ ‡§∞‡§π‡§æ ‡§π‡•à
        await sendAdvancedTraffic(jobId, i, currentProxy, targetUrl);

        // 24 ‡§ò‡§Ç‡§ü‡•á ‡§Æ‡•á‡§Ç ‡§´‡•à‡§≤‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§°‡§ø‡§≤‡•á ‡§ï‡•à‡§≤‡§ï‡•Å‡§≤‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç 
        const randomVariation = Math.random() * 0.3 + 0.85; 
        const finalDelay = BASE_DELAY_MS * randomVariation;

        console.log(`[‚è±Ô∏è ${jobId} View ${i}/${views}] Waiting for ${(finalDelay / 1000 / 60).toFixed(2)} minutes before next dispatch.`);
        
        // ‡§á‡§Ç‡§§‡§ú‡§º‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç
        await wait(finalDelay); 
    }
    
    console.log(`--- Job ${jobId} Finished! All ${views} views delivered over ${TOTAL_DISPATCH_TIME_HOURS} hours. ---`);
});


// Instagram Caption Generator API: /api/generate-caption
app.post('/api/generate-caption', async (req, res) => {
    const { reelTopic, captionStyle, numberOfCaptions } = req.body;
    if (!GEMINI_API_KEY) { return res.status(500).json({ success: false, message: "AI Key is not configured." }); }
    try {
        const openai = new OpenAI({ apiKey: GEMINI_API_KEY }); 
        const prompt = `Generate ${numberOfCaptions} catchy, viral captions in ${captionStyle} style for a reel about "${reelTopic}". Respond with a simple, numbered list of captions.`;
        const completion = await openai.chat.completions.create({ model: "gpt-3.5-turbo", messages: [{ role: "user", content: prompt }] });
        const captions = completion.choices[0].message.content.trim().split('\n').map(line => line.replace(/^\s*\d+\.\s*/, '').trim()).filter(line => line.length > 0);
        return res.status(200).json({ success: true, captions: captions });
    } catch (error) {
        return res.status(500).json({ success: false, message: "Caption generation failed. Check API key." });
    }
});


// Article Generator API: /api/generate-article
app.post('/api/generate-article', async (req, res) => {
    const { topic, length, style } = req.body;
    if (!GEMINI_API_KEY) { return res.status(500).json({ success: false, message: "AI Key is not configured." }); }
    try {
        const openai = new OpenAI({ apiKey: GEMINI_API_KEY }); 
        const prompt = `Write a comprehensive article on "${topic}". The article should be ${length} words long and written in a ${style} tone. Include an introduction, 3-4 main sections with subheadings, and a conclusion.`;
        const completion = await openai.chat.completions.create({ model: "gpt-4", messages: [{ role: "user", content: prompt }] });
        const article = completion.choices[0].message.content.trim();
        return res.status(200).json({ success: true, article: article });
    } catch (error) {
        return res.status(500).json({ success: false, message: "Article generation failed. Check API key." });
    }
});


// Health check endpoint
app.get('/', (req, res) => {
    res.send('Service is active.');
});

// Start Server
app.listen(port, () => {
    console.log(`Server running on port ${port}`);
});
