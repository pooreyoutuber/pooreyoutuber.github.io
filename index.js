// index.js

const express = require('express');
const puppeteer = require('puppeteer-extra');
const StealthPlugin = require('puppeteer-extra-plugin-stealth');
const { v4: uuidv4 } = require('uuid');
const { OpenAI } = require('openai');
const url = require('url'); 
puppeteer.use(StealthPlugin());

const app = express();
const port = 10000;

app.use(express.json());

// ======================= 1. ‡§ï‡•â‡§®‡•ç‡§´‡§º‡§ø‡§ó‡§∞‡•á‡§∂‡§® ‡§î‡§∞ ‡§™‡•ç‡§∞‡•â‡§ï‡•ç‡§∏‡•Ä ‡§°‡•á‡§ü‡§æ (‡§™‡•ç‡§∞‡•â‡§ï‡•ç‡§∏‡•Ä ‡§ï‡•ã ‡§Ö‡§®‡§¶‡•á‡§ñ‡§æ ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ) ========================

// üö® ‡§™‡•ç‡§∞‡•â‡§ï‡•ç‡§∏‡•Ä ‡§ï‡•ã ‡§™‡•Ç‡§∞‡•Ä ‡§§‡§∞‡§π ‡§∏‡•á ‡§°‡§ø‡§∏‡•á‡§¨‡§≤ ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à ‡§§‡§æ‡§ï‡§ø ‡§ï‡§Æ ‡§∏‡•á ‡§ï‡§Æ 1 ‡§µ‡•ç‡§Ø‡•Ç ‡§Ü ‡§∏‡§ï‡•á‡•§
const PROXY_LIST_STRING = null; // ‡§™‡•ç‡§∞‡•â‡§ï‡•ç‡§∏‡•Ä ‡§≤‡§ø‡§∏‡•ç‡§ü ‡§ï‡•ã ‡§ñ‡§æ‡§≤‡•Ä ‡§∏‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
const PROXY_USER = null;
const PROXY_PASS = null; 

const GEMINI_API_KEY = process.env.GEMINI_API_KEY || process.env.OPENAI_API_KEY; 

let PROXIES = []; // ‡§≤‡§ø‡§∏‡•ç‡§ü ‡§ñ‡§æ‡§≤‡•Ä ‡§∞‡§π‡•á‡§ó‡•Ä

let proxyIndex = 0;

const wait = (ms) => new Promise(resolve => setTimeout(resolve, ms));

// ======================= 2. ‡§è‡§°‡§µ‡§æ‡§Ç‡§∏ ‡§ü‡•ç‡§∞‡•à‡§´‡§º‡§ø‡§ï ‡§≤‡•â‡§ú‡§ø‡§ï (Direct Connection) ========================

async function sendAdvancedTraffic(jobId, viewNumber, proxyUrl, targetUrl, searchQuery) {
    let browser;
    // proxyUrl ‡§î‡§∞ finalProxyUrl ‡§ï‡•ã ‡§á‡§∏‡•ç‡§§‡•á‡§Æ‡§æ‡§≤ ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§è‡§ó‡§æ‡•§

    try {
        console.log(`[üöÄ ${jobId} View ${viewNumber}] Starting with Direct Connection (No Proxy) for testing.`);

        browser = await puppeteer.launch({
            headless: true,
            args: [
                // ‡§™‡•ç‡§∞‡•â‡§ï‡•ç‡§∏‡•Ä ‡§Ü‡§∞‡•ç‡§ó‡•Å‡§Æ‡•á‡§Ç‡§ü ‡§Ö‡§¨ ‡§®‡§π‡•Ä‡§Ç ‡§¶‡§ø‡§è ‡§ú‡§æ‡§è‡§Å‡§ó‡•á
                '--no-sandbox',
                '--disable-setuid-sandbox',
                '--disable-gpu', 
                '--window-size=1280,720' 
            ],
            timeout: 45000 
        });

        const page = await browser.newPage();
        
        // 2. Search (‡§ñ‡•ã‡§ú‡•á‡§Ç) - Google ‡§™‡§∞ ‡§ú‡§æ‡§è‡§Å
        console.log(`[${jobId} View ${viewNumber}] Searching Google for: ${searchQuery}`);
        await page.goto('https://www.google.com', { waitUntil: 'domcontentloaded', timeout: 45000 });
        await page.type('textarea[name="q"]', searchQuery, { delay: 100 }); 
        await page.keyboard.press('Enter');
        
        // 3. Click (‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞‡•á‡§Ç) - ‡§Ö‡§™‡§®‡•Ä ‡§µ‡•á‡§¨‡§∏‡§æ‡§á‡§ü ‡§¢‡•Ç‡§Ç‡§¢‡•á‡§Ç
        await page.waitForTimeout(5000 + Math.random() * 2000); 
        
        const targetDomain = new URL(targetUrl).hostname;
        const targetLinkSelector = `a[href*="${targetDomain}"]`;
        const targetLink = await page.$(targetLinkSelector);
        
        if (targetLink) {
            console.log(`[üü¢ ${jobId} View ${viewNumber}] Target URL found. Clicking...`);
            await targetLink.click();
            await page.waitForNavigation({ waitUntil: 'networkidle0', timeout: 45000 }); 
        } else {
            console.log(`[üî¥ ${jobId} View ${viewNumber}] Target URL not found on search page. Aborting view.`);
        }

        // 4. On-Page Interaction (‡§∏‡•ç‡§ï‡•ç‡§∞‡•â‡§≤ ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§∞‡•Å‡§ï‡•á‡§Ç)
        console.log(`[${jobId} View ${viewNumber}] Landed. Starting deep interaction...`);
        
        const totalDuration = Math.floor(Math.random() * (30000 - 15000 + 1)) + 15000;
        const scrollCount = 4;
        const scrollDelay = totalDuration / scrollCount;

        for (let i = 1; i <= scrollCount; i++) {
            const scrollAmount = Math.floor(Math.random() * 500) + 100;
            await page.evaluate(y => { window.scrollBy(0, y); }, scrollAmount); 
            await page.waitForTimeout(scrollDelay * (Math.random() * 0.5 + 0.75)); 
        }

        // 5. Success
        console.log(`[‚úÖ ${jobId} View ${viewNumber}] Full User Journey Complete.`);

    } catch (error) {
        console.error(`[‚ùå ${jobId} View ${viewNumber}] Job failed (Direct Connection Error): ${error.message}`);
    } finally {
        if (browser) {
            await browser.close();
        }
    }
}

// ----------------------------------------------------
// API ENDPOINTS (Timed Dispatch Logic)
// ----------------------------------------------------

// Traffic Boost API: /api/boost-traffic
app.post('/api/boost-traffic', async (req, res) => {
    const { targetUrl, searchQuery, views } = req.body;
    
    // ‡§á‡§®‡§™‡•Å‡§ü ‡§µ‡•à‡§≤‡§ø‡§°‡•á‡§∂‡§®
    if (!targetUrl || !searchQuery || !views || views > 500) {
        return res.status(400).json({ 
            success: false, 
            message: "Missing fields or views > 500." 
        });
    }

    // ‡§ü‡•á‡§∏‡•ç‡§ü ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡§ø‡§∞‡•ç‡§´‡§º ‡§è‡§ï ‡§µ‡•ç‡§Ø‡•Ç ‡§ö‡§≤‡§æ‡§è‡§Å
    const viewsToRun = 1;
    const jobId = uuidv4().substring(0, 8);
    
    // ‡§∏‡§∞‡•ç‡§µ‡§∞ ‡§ï‡•ã ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§ú‡§µ‡§æ‡§¨ ‡§¶‡•á‡§Ç
    res.status(202).json({
        success: true, 
        message: `Job ${jobId} accepted. Running 1 test view directly (without proxy). Check logs for result.`, 
        simulation_mode: "Direct Headless Browser Test" 
    });

    // ‡§µ‡•ç‡§Ø‡•Ç ‡§ï‡•ã ‡§ö‡§≤‡§æ‡§è‡§Å
    await sendAdvancedTraffic(jobId, 1, null, targetUrl, searchQuery);
    
    console.log(`--- Job ${jobId} Finished! 1 test view delivered. ---`);
});


// Instagram Caption Generator API: /api/generate-caption
app.post('/api/generate-caption', async (req, res) => {
    const { reelTopic, captionStyle, numberOfCaptions } = req.body;
    if (!GEMINI_API_KEY) { return res.status(500).json({ success: false, message: "AI Key is not configured." }); }
    try {
        const openai = new OpenAI({ apiKey: GEMINI_API_KEY }); 
        const prompt = `Generate ${numberOfCaptions} catchy, viral captions in ${captionStyle} style for a reel about "${reelTopic}". Respond with a simple, numbered list of captions.`;
        const completion = await openai.chat.completions.create({ model: "gpt-3.5-turbo", messages: [{ role: "user", content: prompt }] });
        const captions = completion.choices[0].message.content.trim().split('\n').map(line => line.replace(/^\s*\d+\.\s*/, '').trim()).filter(line => line.length > 0);
        return res.status(200).json({ success: true, captions: captions });
    } catch (error) {
        return res.status(500).json({ success: false, message: "Caption generation failed. Check API key." });
    }
});


// Article Generator API: /api/generate-article
app.post('/api/generate-article', async (req, res) => {
    const { topic, length, style } = req.body;
    if (!GEMINI_API_KEY) { return res.status(500).json({ success: false, message: "AI Key is not configured." }); }
    try {
        const openai = new OpenAI({ apiKey: GEMINI_API_KEY }); 
        const prompt = `Write a comprehensive article on "${topic}". The article should be ${length} words long and written in a ${style} tone. Include an introduction, 3-4 main sections with subheadings, and a conclusion.`;
        const completion = await openai.chat.completions.create({ model: "gpt-4", messages: [{ role: "user", content: prompt }] });
        const article = completion.choices[0].message.content.trim();
        return res.status(200).json({ success: true, article: article });
    } catch (error) {
        return res.status(500).json({ success: false, message: "Article generation failed. Check API key." });
    }
});


// Health check endpoint
app.get('/', (req, res) => {
    res.send('Service is active.');
});

// Start Server
app.listen(port, () => {
    console.log(`Server running on port ${port}`);
});
